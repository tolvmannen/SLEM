Description: Updated VPC with one public and two private subnets
Parameters:
  Ipv6Pool:
    Description: Amazon provided Ipv6 address pool (1) or bring your own Ipv6 address pool (2)
    Type: Number
    AllowedValues: [1, 2]
  Ipv6CidrBlock:
    Description: /56 cidr block of your own Ipv6 address pool, only fill this field if you chose to bring your own Ipv6 pool (2)
    Type: String

  RouterInstanceId:
    Description: An instance-id if AWS Hosted NAT-gateway shouldn't be used, ex i-xxxxxxxxxxx to route traffic from lan and dmz through when going outside VPC (towards internet.)
    Type: String
    Default: NONE

Conditions:
  Ipv6PoolIsAmazon: !Equals [ !Ref Ipv6Pool, 1]
  Ipv6PoolIsBYOIP: !Equals [ !Ref Ipv6Pool, 2]

  RouterInstanceIdSet: !Not
    - Fn::Equals: ["NONE", !Ref RouterInstanceId]

  UseNatGateway:
    - Fn::Equals: ["NONE", !Ref RouterInstanceId]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Role
          Value: VPC
  VPCCidrBlockIPv6:
    Type: AWS::EC2::VPCCidrBlock
    Condition: Ipv6PoolIsAmazon
    Properties:
      VpcId: !Ref VPC
      AmazonProvidedIpv6CidrBlock: true
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.99.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '99::/64'
            VpcPart: !If [Ipv6PoolIsBYOIP, !Select [ 0, !Split [ '00::/56', !Ref Ipv6CidrBlock ]], !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]]
      Tags:
        - Key: Role
          Value: PublicSubnet
  PrivateLANSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.55.0/24
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '55::/64'
            VpcPart: !If [Ipv6PoolIsBYOIP, !Select [ 0, !Split [ '00::/56', !Ref Ipv6CidrBlock ]], !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]]
      Tags:
        - Key: Role
          Value: PrivateLANSubnet
  PrivateDMZSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.77.0/24
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - SubnetPart: '77::/64'
            VpcPart: !If [Ipv6PoolIsBYOIP, !Select [ 0, !Split [ '00::/56', !Ref Ipv6CidrBlock ]], !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ]]]]
      Tags:
        - Key: Role
          Value: PrivateDMZSubnet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Role
          Value: InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId: !Ref VPC
  EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Role
          Value: EIP
  NatGateway:
    Type: AWS::EC2::NatGateway
    Condition: UseNatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet
      Tags:
        - Key: Role
          Value: NatGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Role
          Value: PublicRouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicIpv6Route:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId:
        Ref: PublicRouteTable
      GatewayId:
        Ref: InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Role
          Value: PrivateRouteTable
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      # If no instance-id configured in stack parameters, use natgateway
      # else, route traffic through instance-id
      NatGatewayId: !If
        - UseNatGateway
        - !Ref NatGateway
        - !Ref AWS::NoValue
      InstanceId: !If
        - RouterInstanceIdSet
        - !Ref RouterInstanceId
        - !Ref AWS::NoValue
  PrivateIpv6Route:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId:
        Ref: PrivateRouteTable
      GatewayId:
        Ref: InternetGateway
  PrivateLANSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateLANSubnet
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateDMZSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateDMZSubnet
      RouteTableId:
        Ref: PrivateRouteTable
Outputs:
  StackVPC:
    Description: The ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  StackIpv6VPC:
    Description: The Ipv6 cidr block of the vpc
    Value: !If [Ipv6PoolIsAmazon, !Select [ 0, !GetAtt VPC.Ipv6CidrBlocks ], 'No value']
    Export:
      Name: !Sub "${AWS::StackName}-VPCIpv6"
  StackPublicSubnet:
    Description: The ID of the public subnet
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub "${AWS::StackName}-PuSID"
  StackPrivateLANSubnet:
    Description: The ID of the private LAN subnet
    Value: !Ref PrivateLANSubnet
    Export:
      Name: !Sub "${AWS::StackName}-PrLANSID"
  StackPrivateDMZSubnet:
    Description: The ID of the private DMZ subnet
    Value: !Ref PrivateDMZSubnet
    Export:
      Name: !Sub "${AWS::StackName}-PrDMZSID"
  StackIpv6PublicSubnet:
    Description: The Ipv6 cidr block of the public subnet
    Value: !Select [ 0, !GetAtt PublicSubnet.Ipv6CidrBlocks ]
    Export:
      Name: !Sub "${AWS::StackName}-PuSIpv6"
  StackIpv6LANSubnet:
    Description: The Ipv6 cidr block of the private LAN subnet
    Value: !Select [ 0, !GetAtt PrivateLANSubnet.Ipv6CidrBlocks ]
    Export:
      Name: !Sub "${AWS::StackName}-PrLANSIpv6"
  StackIpv6DMZSubnet:
    Description: The Ipv6 cidr block of the private DMZ subnet
    Value: !Select [ 0, !GetAtt PrivateDMZSubnet.Ipv6CidrBlocks ]
    Export:
      Name: !Sub "${AWS::StackName}-PrDMZSIpv6"
